name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  cicd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      - name: Build with Gradle
        run: ./gradlew build

      - name: Create zip file
        run: |
          zip -r build/build-artifacts.zip build/libs/* Dockerfile compose.yml start-server.sh prometheus/prometheus.yml compose-matilda-blue.yml compose-matilda-green.yml compose-infra-only.yml 

      - name: set mode for tar
        run: chmod 775 build/build-artifacts.zip

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SECRET }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.OCI_HOST }} >> ~/.ssh/known_hosts

      - name: Verify SSH key
        run: |
          ls -l ~/.ssh
          cat ~/.ssh/id_rsa | head -n 5  # SSH 키 상위 5줄만 출력 (보안 문제 방지)

      - name: Deploy to OCI instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} << 'EOF'
            cd /home/matilda-backend  # 이동할 디렉토리 (프로젝트 디렉토리로 변경)
            rm -rf build-artifacts.zip  # 기존 파일 제거
            exit
          EOF
          
          scp -i ~/.ssh/id_rsa build/build-artifacts.zip ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }}:/home/matilda-backend/build-artifacts.zip
          
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.OCI_USER }}@${{ secrets.OCI_HOST }} << 'EOF'
          cd /home/matilda-backend
          unzip -o build-artifacts.zip
          
          ./stop-server.sh
          # nohup을 사용하여 서버를 백그라운드에서 실행하고 stdout/stderr를 파일로 리다이렉션
          nohup ./start-server.sh > server.log 2>&1 &
          # 즉시 종료되도록 명시적인 종료 코드 추가
          echo "Server started in background"
          exit
          EOF

      - name: Health Check
        run: |
          echo "Waiting for server to be ready..."
          
          for i in {1..10}
          do
            STATUS=$(curl -s --max-time 3 -o /dev/null -w "%{http_code}" http://${{ secrets.OCI_HOST }}/actuator/health || true)
            if [ "$STATUS" == "200" ]; then
              echo "✅ Health check passed"
              exit 0
            else
              echo "⏳ Waiting for server... attempt $i (status=$STATUS)"
              sleep 5
            fi
          done
          
          echo "❌ Health check failed after multiple attempts"
          exit 1
